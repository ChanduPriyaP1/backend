pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        // Timeout counter starts AFTER agent is allocated
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    environment { 
      def appVersion = '' // Variable Declaration
    }

    stages {
        stage('npm install') {
            steps {
                sh """
                    npm install
                    ls -ltr
                """
            }
        }
        stage('Read Version') {
            steps {
                script {
                    def packageJson = readJSON file: 'package.json'
                    appVersion = packageJson.version
                    echo "Application Version is : $appVersion"
                }
            }
        }
        stage('Build') {

            steps {

                sh """
                   zip -q -r backend-${appVersion}.zip * -x Jenkinafile -x backend-${appVersion}.zip
                   ls -ltr
                   cd backend-${appVersion}.zip
                """      
            }
        }
    }    

     post { 
        always { 
            echo 'I will always say Hello again!'
            deleteDir() /* clean up our workspace */
        }
         success {
            echo 'I succeeded!'
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
        changed {
            echo 'Things were different before...'
        }
    
    }
}